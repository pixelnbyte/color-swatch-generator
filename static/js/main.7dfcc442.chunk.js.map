{"version":3,"sources":["Dropzone.js","Crop.js","Header.js","Footer.js","reportWebVitals.js","index.js"],"names":["DropzoneComponent","state","files","this","map","file","name","size","onDrop","props","onDropChange","getRootProps","getInputProps","className","Component","Crop","src","crop","unit","width","aspect","fileUploaded","fileName","onSelectFile","e","target","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","onColorName","value","a","height","getCroppedImg","croppedImageUrl","canvas","document","createElement","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","URL","revokeObjectURL","fileUrl","createObjectURL","console","error","view","label","toLowerCase","replace","ruleOfThirds","onComplete","onChange","alt","style","maxWidth","type","href","download","class","Dropzone","PureComponent","Header","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7dfcc442.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nclass DropzoneComponent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      files: []\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const files = this.state.files.map(file => (\r\n      <li key={file.name}>\r\n        {file.name} - {file.size} bytes\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <Dropzone onDrop={this.props.onDropChange}>\r\n        {({getRootProps, getInputProps}) => (\r\n          <section className=\"container DropContainer\">\r\n            <div {...getRootProps({className: 'dropzone'})}>\r\n              <input {...getInputProps()} />\r\n              <p>Drag 'n' drop some files here, or click to select files</p>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DropzoneComponent;","import ReactDOM from 'react-dom';\r\nimport React, { PureComponent } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport DropzoneComponent from './Dropzone';\r\n\r\nimport './App.css';\r\n\r\nclass Crop extends PureComponent {\r\n  state = {\r\n    src: null,\r\n    crop: {\r\n      unit: 'px',\r\n      width: 50,\r\n      aspect: 1 / 1\r\n    },\r\n    fileUploaded: false,\r\n    fileName: ''\r\n  };\r\n\r\n  onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', () =>\r\n        this.setState({ src: reader.result })\r\n      );\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  // If you setState the crop in here you should return false.\r\n  onImageLoaded = (image) => {\r\n    this.imageRef = image;\r\n  };\r\n\r\n  onCropComplete = (crop) => {\r\n    this.makeClientCrop(crop);\r\n  };\r\n\r\n  onCropChange = (crop, percentCrop) => {\r\n    // You could also use percentCrop:\r\n    // this.setState({ crop: percentCrop });\r\n    this.setState({ crop });\r\n  };\r\n\r\n  onColorName = (e) => {\r\n    this.setState({ fileName: e.target.value });\r\n  }\r\n\r\n  onDropChange = (files) => {\r\n    this.setState({ fileUploaded: true })\r\n\r\n    if (files && files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', () =>\r\n        this.setState({ src: reader.result })\r\n      );\r\n      reader.readAsDataURL(files[0]);\r\n    }\r\n  }\r\n\r\n  // this.onDrop = (files) => {\r\n  //   this.setState({files})\r\n  // };\r\n\r\n  async makeClientCrop(crop) {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      const croppedImageUrl = await this.getCroppedImg(\r\n        this.imageRef,\r\n        crop,\r\n        'newFile.jpeg'\r\n      );\r\n      this.setState({ croppedImageUrl });\r\n    }\r\n  }\r\n\r\n  getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement('canvas');\r\n    const pixelRatio = window.devicePixelRatio;\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = crop.width * pixelRatio * scaleX;\r\n    canvas.height = crop.height * pixelRatio * scaleY;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = 'high';\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob(\r\n        (blob) => {\r\n          if (!blob) {\r\n            //reject(new Error('Canvas is empty'));\r\n            console.error('Canvas is empty');\r\n            return;\r\n          }\r\n          blob.name = fileName;\r\n          window.URL.revokeObjectURL(this.fileUrl);\r\n          this.fileUrl = window.URL.createObjectURL(blob);\r\n          resolve(this.fileUrl);\r\n        },\r\n        'image/png',\r\n        1\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { crop, croppedImageUrl, src } = this.state;\r\n    let view;\r\n    let label;\r\n    let fileName;\r\n    if(this.state.fileName.length < 1) {\r\n      label = \"Color Name\";\r\n    } else {\r\n      fileName = this.state.fileName.toLowerCase().replace(/\\s/g , \"-\") + '.png';\r\n    }\r\n    if (!this.state.fileUploaded) {\r\n      view = <div class=\"DropWrapper\"><DropzoneComponent onDropChange={this.onDropChange} /></div>;\r\n    } else {\r\n      view = \r\n      <div className=\"FlexWrapper\">\r\n        <div className=\"CropSelector\">\r\n          {src && (\r\n            <ReactCrop\r\n              src={src}\r\n              crop={crop}\r\n              ruleOfThirds\r\n              onImageLoaded={this.onImageLoaded}\r\n              onComplete={this.onCropComplete}\r\n              onChange={this.onCropChange}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"DownloadForm\">\r\n          <div className=\"square crop\">\r\n            {croppedImageUrl && (\r\n              <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n            )}\r\n          </div>\r\n          <div className=\"circle crop\">\r\n            {croppedImageUrl && (\r\n              <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n            )}\r\n          </div>\r\n          <label><input type=\"text\" onChange={this.onColorName} /><span>{label}</span></label>\r\n          <p>{fileName}</p>\r\n          <a href={croppedImageUrl} className=\"download\" download={fileName}>Download</a>\r\n        </div>\r\n      </div>\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {view}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Crop;\r\n","function Header() {\r\n  return (\r\n    <div className=\"Header\">\r\n      <header className=\"HeaderWrapper\">\r\n        <a href=\"/\"><h1>Color Swatch Generator</h1></a>\r\n        <p>Use this app to easily create color swatches for your ecommerce website.</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","function Footer() {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <p>Website by <a href=\"https://pixelnbyte.com\">Pixel &amp; Byte</a></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Crop from './Crop';\nimport Header from './Header';\nimport Footer from './Footer';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <Crop />\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}